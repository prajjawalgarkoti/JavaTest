Qns 1 :

package q1;

import java.util.Scanner;

public class Main {

	public static Integer SplitTheNumber(String p) {
//		splitting on the basis of space
		String[] words = p.split(" ");
		Integer result = 0;
//		checking + sign is contained by words[1] or not 
		if (words[1].contains("+")) {
			
			String[] splittedOnBases = words[1].split("\\+"); //splitting words[1] on the basis of + sign
//			on the basis splittedOnBases[0]'s length words[0].substing() indexes is calculated
			result = Integer.parseInt(words[0].substring(0, splittedOnBases[0].length()))
					+ Integer.parseInt(words[0].substring(splittedOnBases[0].length()));
			return result;
		}
//		checking - sign is contained by words[1] or not 
		if (words[1].contains("-")) {
			String[] splittedOnBases = words[1].split("-");//splitting words[1] on the basis of - sign
//			on the basis splittedOnBases[0]'s length words[0].substing() indexes is calculated
			result = Integer.parseInt(words[0].substring(0, splittedOnBases[0].length()))
					- Integer.parseInt(words[0].substring(splittedOnBases[0].length()));
			return result;

		}
//		if + and - both sign are not there then -1 is returned
		return -1;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Scanner scan = new Scanner(System.in);
		System.out.print("Enter the data : ");
		String pattern = scan.nextLine();
		
		System.out.println("Output is : "+SplitTheNumber(pattern));

	}

}
===========================================================================
Qns 2:
public class num {
    // Prints all triplets in arr[] with 0 sum
    static void FindFourElements(int[] arr, int n)
    {
        boolean found = false;
        for (int i = 0; i < n - 3; i++) {
            for (int j = i + 1; j < n - 2; j++) {
                for (int k = j + 1; k < n-1; k++) {
                    for (int l = k + 1; l < n; l++) {
                    if (arr[i] + arr[j] + arr[k] + arr[l]  == 0) {
                        System.out.println(arr[i] + " " + arr[j] + " " + arr[k] + " " + arr[l]);
                        found = true;
                    }
                }
            }
        }
        }
 
        // If no FindFourElements with 0 sum found in array
        if (found == false)
            System.out.println(" not exist ");
    }
 
    // Driver code
    public static void main(String[] args)
    {
        int arr[] = { 2,3,1,0,-4,-1 };
        int n = arr.length;
        FindFourElements(arr, n);
    }
}

============================================================================
Qns: 3


package com.Qns3;



import java.text.DecimalFormat;
import java.util.Scanner;

public class Main {
	private static final String[] tens = { "", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty",
			"Seventy", "Eighty", "Ninety" };

	private static final String[] num = { "", "One", "Two", "Three", "Four", "Five", "Six", "Seven",
			"Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen",
			"Seventeen", "Eighteen", "Nineteen" };

	private static String convertSmallerThanThousand(int number) {
		String soFar;

		if (number % 100 < 20) {
			soFar = num[number % 100];
			number /= 100;
		} else {
			soFar = num[number % 10];
			number /= 10;

			soFar = tens[number % 10] + soFar;
			number /= 10;
		}
		if (number == 0)
			return soFar;
		return num[number] + "Hundred" + soFar;
	}

	public static String convert(long number) {
		if (number == 0) {
			return "zero";
		}

		String snumber = Long.toString(number);

		
		String mask = "000000000000";
		DecimalFormat df = new DecimalFormat(mask);
		snumber = df.format(number);

		
		int billions = Integer.parseInt(snumber.substring(0, 3));
	
		int millions = Integer.parseInt(snumber.substring(3, 6));
	
		int hundredThousands = Integer.parseInt(snumber.substring(6, 9));
	
		int thousands = Integer.parseInt(snumber.substring(9, 12));

		String tradBillions;
		switch (billions) {
		case 0:
			tradBillions = "";
			break;
		case 1:
			tradBillions = convertSmallerThanThousand(billions) + "Billion";
			break;
		default:
			tradBillions = convertSmallerThanThousand(billions) + "Billion";
		}
		String result = tradBillions;

		String tradMillions;
		switch (millions) {
		case 0:
			tradMillions = "";
			break;
		case 1:
			tradMillions = convertSmallerThanThousand(millions) + "Million";
			break;
		default:
			tradMillions = convertSmallerThanThousand(millions) + "Million";
		}
		result = result + tradMillions;

		String tradHundredThousands;
		switch (hundredThousands) {
		case 0:
			tradHundredThousands = "";
			break;
		case 1:
			tradHundredThousands = "oneThousand";
			break;
		default:
			tradHundredThousands = convertSmallerThanThousand(hundredThousands) + "Thousand";
		}
		result = result + tradHundredThousands;

		String tradThousand;
		tradThousand = convertSmallerThanThousand(thousands);
		result = result + tradThousand;
		return result.replaceAll("^\\s+", "").replaceAll("\\b\\s{2,}\\b", " ");
	}

	public static void main(String[] args) {
		
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Number/ Amount : ");
		String result = convert(scan.nextLong()) + "Dollar";
		System.out.println(result);

	}

}

===========================================================================
Qns 4:




package com.SumOfPrime;
 
public class SumOfPrime {
 
    public static void main(String args[]){
         
        int number = 2;
        int count = 0;
        long sum = 0;
        while(count < 1000){
            if(isPrimeNumber(number)){
                sum += number;
                count++;
            }
            number++;
        }
        System.out.println(sum);
    }
     
    private static boolean isPrimeNumber(int number){
         
        for(int i=2; i<=number/2; i++){
            if(number % i == 0){
                return false;
            }
        }
        return true;
    }
}


===========================================================================

Qns 5:

package q5;

import java.util.Scanner;

public class Main {

	public static double distance(int x1, int y1, int x2, int y2) {
		return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) * 1.0);
	}

	public static void main(String[] args) {
		Scanner scan  = new Scanner(System.in);
		System.out.print("Enter X1	: ");
		int x1 = scan.nextInt();
		System.out.print("Enter Y1	: ");
		int y1 = scan.nextInt();
		System.out.print("Enter X2	: ");
		int x2 = scan.nextInt();
		System.out.print("Enter Y2	: ");
		int y2 = scan.nextInt();
		System.out.println(Math.round(distance(x1, y1, x2, y2) * 100000.0) / 100000.0);
	}

}

==========================================================================

Qns: 6

package com.Ques6;

import java.util.Scanner;

class UtoL {

	
	static void convertOpposite(StringBuffer str)
	{
		int ln = str.length();

		
		for (int i = 0; i < ln; i++) {
			Character c = str.charAt(i);
			if (Character.isLowerCase(c))
				str.replace(i, i + 1,
							Character.toUpperCase(c) + "");
			else
				str.replace(i, i + 1,
							Character.toLowerCase(c) + "");
		}
	}

	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter String : ");
		String str = sc.next();
		StringBuffer Bf = new StringBuffer();
		Bf.append(str);
		convertOpposite(Bf);

		System.out.println(Bf);
	}
}


===================================================================================
